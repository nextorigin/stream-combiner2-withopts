// Generated by CoffeeScript 1.10.0
var Combine, Duplexer, EventEmitter, Merge, PassThrough, Readable, parseArgs, recurse, unwrap, wrap,
  slice = [].slice;

PassThrough = require("readable-stream").PassThrough;

Readable = require("readable-stream").Readable;

Duplexer = require("duplexer2-unwrappable");

EventEmitter = require("events").EventEmitter;

wrap = function(tr, opts) {
  if (typeof tr.read === "function") {
    return tr;
  }
  return (new Readable(opts)).wrap(tr);
};

recurse = function(streams) {
  if (streams.length < 2) {
    return;
  }
  streams[0].pipe(streams[1]);
  return recurse(streams.slice(1));
};

unwrap = function(streams) {
  if (streams.length < 2) {
    return;
  }
  streams[0].unpipe(streams[1]);
  return unwrap(streams.slice(1));
};

parseArgs = function(streams, opts) {
  var stream;
  if (Array.isArray(streams[0])) {
    streams = streams[0];
  }
  if (opts && (opts.write || opts.read || opts instanceof EventEmitter)) {
    streams.push(opts);
    opts = {};
  }
  streams = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = streams.length; i < len; i++) {
      stream = streams[i];
      results.push(wrap(stream, opts));
    }
    return results;
  })();
  return {
    streams: streams,
    opts: opts
  };
};

Combine = function() {
  var first, i, j, last, len, onerror, opts, ref, stream, streams, thepipe;
  streams = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), opts = arguments[i++];
  ref = parseArgs(streams, opts), streams = ref.streams, opts = ref.opts;
  if (!streams.length) {
    return new PassThrough;
  }
  if (streams.length === 1) {
    return streams[0];
  }
  opts.bubbleErrors = false;
  first = streams[0];
  last = streams.slice(-1)[0];
  thepipe = new Duplexer(opts, first, last);
  recurse(streams);
  onerror = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return thepipe.emit.apply(thepipe, ["error"].concat(slice.call(args)));
  };
  for (j = 0, len = streams.length; j < len; j++) {
    stream = streams[j];
    stream.on("error", onerror);
  }
  thepipe.unwrap = function() {
    var k, len1;
    thepipe.unbind();
    for (k = 0, len1 = streams.length; k < len1; k++) {
      stream = streams[k];
      stream.removeListener("error", onerror);
    }
    return unwrap(streams);
  };
  return thepipe;
};

Merge = function() {
  var add, i, j, len, onerror, opts, ref, remove, sources, stream, streams, thepipe;
  streams = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), opts = arguments[i++];
  ref = parseArgs(streams, opts), streams = ref.streams, opts = ref.opts;
  if (!streams.length) {
    return new PassThrough;
  }
  if (streams.length === 1) {
    return streams[0];
  }
  sources = [];
  thepipe = new PassThrough(opts);
  onerror = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return thepipe.emit.apply(thepipe, ["error"].concat(slice.call(args)));
  };
  add = function(source) {
    sources.push(source);
    source.once("end", remove.bind(null, source));
    source.on("error", onerror);
    return source.pipe(thepipe, {
      end: false
    });
  };
  remove = function(source) {
    var s;
    source.unpipe(thepipe);
    sources = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = sources.length; j < len; j++) {
        s = sources[j];
        if (s !== source) {
          results.push(s);
        }
      }
      return results;
    })();
    source.removeListener("error", onerror);
    if (!sources.length) {
      return thepipe.end();
    }
  };
  for (j = 0, len = streams.length; j < len; j++) {
    stream = streams[j];
    add(stream);
  }
  thepipe.unwrap = function() {
    var results;
    results = [];
    while (sources.length) {
      results.push(remove(sources[0]));
    }
    return results;
  };
  thepipe.add = add;
  thepipe.remove = remove;
  return thepipe;
};

Combine.Merge = Merge;

module.exports = Combine;

//# sourceMappingURL=index.js.map

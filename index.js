// Generated by CoffeeScript 1.10.0
var Combine, Duplexer, PassThrough, Readable, recurse, unwrap, wrap,
  slice = [].slice;

PassThrough = require("readable-stream").PassThrough;

Readable = require("readable-stream").Readable;

Duplexer = require("duplexer2-unwrappable");

wrap = function(tr, opts) {
  if (typeof tr.read === "function") {
    return tr;
  }
  return (new Readable(opts)).wrap(tr);
};

recurse = function(streams) {
  if (streams.length < 2) {
    return;
  }
  streams[0].pipe(streams[1]);
  return recurse(streams.slice(1));
};

unwrap = function(streams) {
  if (streams.length < 2) {
    return;
  }
  streams[0].unpipe(streams[1]);
  return unwrap(streams.slice(1));
};

Combine = function() {
  var first, i, j, last, len, onerror, opts, stream, streams, thepipe;
  streams = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), opts = arguments[i++];
  if (Array.isArray(streams[0])) {
    streams = streams[0];
  }
  if ((opts != null ? opts.write : void 0) || (opts != null ? opts.read : void 0)) {
    streams.push(opts);
    opts = {};
  }
  streams = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = streams.length; j < len; j++) {
      stream = streams[j];
      results.push(wrap(stream, opts));
    }
    return results;
  })();
  if (!streams.length) {
    return new PassThrough(opts);
  }
  if (streams.length === 1) {
    return streams[0];
  }
  opts.bubbleErrors = false;
  first = streams[0];
  last = streams.slice(-1)[0];
  thepipe = new Duplexer(opts, first, last);
  recurse(streams);
  onerror = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    args.unshift("error");
    return thepipe.emit.apply(thepipe, args);
  };
  for (j = 0, len = streams.length; j < len; j++) {
    stream = streams[j];
    stream.on("error", onerror);
  }
  thepipe.unwrap = function() {
    var k, len1;
    thepipe.unbind();
    for (k = 0, len1 = streams.length; k < len1; k++) {
      stream = streams[k];
      stream.removeListener("error", onerror);
    }
    return unwrap(streams);
  };
  return thepipe;
};

module.exports = Combine;

//# sourceMappingURL=index.js.map
